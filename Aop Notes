
Type of Proxy - 

Spring AOP uses either JDK dynamic proxies or CGLIB to create the proxy for a given target object.
If the target object to be proxied implements at least one interface then a JDK dynamic proxy will be used. All of the interfaces 
implemented by the target type will be proxied. If the target object does not implement any interfaces then a CGLIB proxy will be created.

Points - 
1. The internal call from the target method to another target method escapes the aspect interceptor.
    ((CoreBusinessSubordinate) AopContext.currentProxy()).doSomethingSmall(4);
2. We can create our own annotation and mark advice pointcut using this annotation.

Order of Aspect - 

Order is undefined unless explicitly indicated (for instance, by using @Order)
On the way in to a joinpoint, the advice with lowest Order value gets executed first.
On the way out from the joinpoint, the advice with highest Order value gets executed first.
Higher order closer to target method.

Order of Advice - 

In Around Before
In Before 
In Target method
In Around After
In after
In after returning
