1. SOAP uses only XML as input and outpust, REST supports CSV, JSON
2. SOAP is a std protocol
3. SOAP is a envelop and REST is postcard
4. SOAP has inbuilt error handling
5. REST HTTP requests are: POST, GET, PUT, and DELETE. SoapUI supports HEAD, OPTIONS, TRACE and PATCH requests as well
6. REST small learning curve


This code uses Spring 4’s new @RestController annotation, which marks the class as a controller where every method returns a domain 
object instead of a view. It’s shorthand for @Controller and @ResponseBody rolled together.

A key difference between a traditional MVC controller and the RESTful web service controller above is the way that the HTTP response 
body is created. Rather than relying on a view technology to perform server-side rendering of the greeting data to HTML, this RESTful 
web service controller simply populates and returns a Greeting object. The object data will be written directly to the HTTP response as 
JSON.

Create Http call in java - 

Class<T> returnObjectClass = new ParameterizedTypeReference<Map<Integer, List<AsOfDate>>>() {};
Map<String, Object> map = 
map.put("reportTag", reportTag.name());

HttpHeaders requestHeaders=new HttpHeaders();
requestHeaders.setContentType(MediaType.APPLICATION_JSON);
HttpEntity<U> requestEntity = new HttpEntity<U>(requestBody, requestHeaders);
ResponseEntity<T> response = restTemplate.exchange(buildServiceUrl(url), httpMethod, requestEntity, returnObjectClass, map);
result = response.getBody();

Handling Rest call
@RestController
public class PortfolioServicesController {

	/** The portfolio services. */
	@Autowired
	private PortfolioServicesV3 portfolioServices;
		
	@RequestMapping(value = "/user/{email}/context", produces = "application/json", method = RequestMethod.POST)
	@ResponseBody
	public UserContext getUserContext(HttpServletResponse response, Principal principal, @RequestBody final Map<String, Object> extendedAttributes) throws IOException{
		UserContext userContext = null;
		try{
			userContext = portfolioServices.getUserContext(principal, extendedAttributes);
		} catch(Exception e){
			exceptionHandler(e, response);
		}
		return userContext;
	}
