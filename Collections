Collection and Map Interface, Map is not part of collection interface, because it has three collections: Keys, values and key-value pairs.
But part of Collection Framework.

Collection method -
addAll, retainAll, removeAll, containsAll, size, clear, iterator, isEmpty, contains, toArray

Interfaces, Classes and their important methods - 
Set(I) - HashSet, TreeSet, LinkedHashSet, CopyOnWriteSet(C)
List(I) - ArrayList, LinkedList, CopyOnWriteList(C) - indexOf, lastIndexOf
Queue(I) - PriotiyQueue, BlockingQueue(I) - PriorityBlockingQueue, ArrayBlockingQueue, LinkedBlockingQueue, DelayQueue, SynchronousQueue 
  - add, remove, element, poll, peek, offer, take, put
Deque(I) - ArrayDeque, LinkedList, LinkedBlockingDeque(C) - addFirst, removeFirst, elementFirst, addLast, removeLast, elementLast, 
  pollFirst, peekFirst, elementFirst, pollLast, peekLast, elementLast
List(I) - Stack - push, pop, peek  
Map(I) - HashMap, TreeMap, LinkedHashMap, ConcurrentHashMap(C) - get, put, entrySet, keySet, entrySet, putAll

Concurrent methods like put, take throws checked Inerrupted exception, if get interruted while waiting; or throws NullPointerException 
if try to insert null element.

Always use right method like poll, pop to get element out of a queue, stack; don't just iterate over it to get a list of all elements, 
otherwise will not be same.

HashMap Working - 
There are serveral hashing buckets. Out of which hashCode will be used to select bucket. And then equals method will be used to match key.
Load Factor - if size of map extends Load Factor * capacity, it will be rehashed. Default .75
Initial Capacity - Initail capacity of map. Default 16

How ConcurrentHashMap works & how is different from HashMap - 
Concurrency-Level - Defines the number which is an estimated number of concurrently updating threads. Default - 16
ConcurrentHashMap provides better Performance by replacing the Hashtable's map wide lock to Segment level lock.
Two Thread - can read from same and different segment parallelly, can write in write in different segment, but not in same segment.
ConcurrentHashMap(200, .75f, 10) - means 10 pairs capacity in each segment.
For more - http://javabypatel.blogspot.in/2016/09/concurrenthashmap-interview-questions.html

fail-safe and fail-fast Iterators - 
1. Fail-safe iterators allow modifications of a collection while iterating over it and don't throw ConcurrentModification exception. 
2. They use copy of original collection to traverse over the elements of the collection. 
3. Required extra space and memory for clonning
4. ex. ConcurrentHashMap, CopyOnWriteArrayList

TreeSet and TreeMap use Comparable and Comparator to arrange objects.
PriorityQueue also uses Comparable and Comparator to get object priority.
Set and Map uses hashcode equals method to compare object and key.

TreeSet<A>, implements comparable, override hashcode method, Can have 2 same objects?
Yes, because it didn't implemented equals method.

Diffences between  -
ArrayList and LinkedList and Vector
HashTable and HashMap
Set and List

ListIterator - can move in both direction - hasPrevious, previous

Collections method -
sort, synchronizedSet, synchronizedMap, synchronizedList

Different way to synchronize map and which one is better and y?
sychronized method, Collections.synchronizedMap and ConcurrentHashMap - first 2 are not designed for multithreading, so not a very fast
way. While Concurrent is designed on segment for better performance.

Remaining Topics -
internal implementation of concurrent collection's method 
