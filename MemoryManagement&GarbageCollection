Object Life Cycle -
1. Created
2. In use
3. Not anymore required, can be deleted

Memory in JVM
1. Heap - Any Objects
2. Stack - local var., parameters, function calls
3. Permanent - class level var, loads class n interface str.
4. Prog registers - hold currently runnig step

-Xss Each stack size, -Xms starting size of heap, -Xmx max size of heap

Stack and Heap -
1. Type of var.
2. Size of stack is very small comapre to heap
3. StackOverFlowError is for Stack, while OutOfMemoryError is for Heap
4. Stack is private memory, accessible only to its thread, while heap is accessible to all

Heap -
1. Young generation - Eden + 2 survivors - all new objects eden & then move to any of survivor area by minor GC
2. Old generation - After surviving multiple Major GCs survivor objects move to old gen 
3. Perm gen

Garbage Collection Algorithm-
1. Refernce Count - Each obj has count of ref. using it, 
Dis - 1. Can't identify data cycles
2. Mark Sweep - Traverse all refernces and mark all live objects, and delete and maintain address of all free memory
Adv 1. Can identify data cycles
Dis - 1. Stop all
      2. Data fragmentation required, otherwise it will throw OutOfMemory even though memory is available in small chunks
3. Mark Sweep Compact - 
4. Mark Sweep Copy -
